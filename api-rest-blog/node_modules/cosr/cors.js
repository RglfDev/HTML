const express = require("express");
const app = express();
const mongoose = require("mongoose");
const cors = require("cors");
const path = require("path");
const multer = require("multer");

const host = "localhost";
const port = 5000;

// middlewares
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    const SafeFile = file.originalname.replace(/\s+/g, `_`);
    cb(null, SafeFile);
  },
});

const upload = multer({ storage });

// mongoose
mongoose
  .connect(`mongodb://127.0.0.1:27017/app3`)
  .then(() => {
    console.log("DB Connect");
  })
  .catch((e) => {
    console.log(`error: ${e}`);
  });

// schema
const authSchema = mongoose.Schema({
  image: String,
  name: String,
  email: String,
  age: Number,
  gender: String,
});

// model
const authModel = mongoose.model(`auth`, authSchema);

// oprations
// insert
app.post(`/api/auth`, upload.single("file"), async (req, res) => {
  const { name, email, age, gender } = req.body;
  const image = req.file?.filename || null;
  // const data = authModel(req.body);
  const data = new authModel({ image, name, email, age, gender });
  await data.save();
  res.send(data);
});

// read
app.get(`/api/auth`, async (req, res) => {
  const data = await authModel.find();
  res.send(data);
});

// readOne
app.get(`/api/auth/:id`, async (req, res) => {
  const data = await authModel.findById(req.params.id);
  res.send(data);
});

// update
app.put(`/api/auth/:id`, upload.single("file"), async (req, res) => {
  const newData = {
    name: req.body.name,
    email: req.body.email,
    age: req.body.age,
    gender: req.body.gender,
  };
  if (req.file) {
    newData.image = req.file.filename;
  }
  const data = await authModel.findByIdAndUpdate(req.params.id, newData, {
    new: true,
  });
  res.send(data);
});
// delete
app.delete(`/api/auth/:id`, async (req, res) => {
  const data = await authModel.findByIdAndDelete(req.params.id);
  res.send({ message: "auth delete" });
});

// server
app.listen(`${port}`, () => {
  console.log(`app is running on : http://${host}:${port}`);
});
